package Custom;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;

import Polygon.Polygon;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

import Graph.Graph;

public class TreePanel extends JPanel implements MouseListener,Animable{

	private static final long serialVersionUID = 1L;
	private int X,Y;
	private Graph graph;
	private int angle,scale_x,scale_y,xcoord,ycoord,graphSize;
	
	private boolean graphCoordinates,fall,hasChange;
	
	public TreePanel() {
		graph = null;
		angle=0;
		scale_x=1;
		scale_y=1;
		graphSize = 6;
		xcoord = 0;
		ycoord=0;
		graphCoordinates = true;
		fall = false;
		hasChange=true;
		addMouseListener(this);
		setSize(1000,1000);
		setVisible(true);
	}

	public static void main(String[] args) {
		new TreePanel();

	}
	
	public void paintComponent(Graphics g) {
		g.clearRect(0, 0, getWidth(), getHeight());
		if(this.graph==null||hasChange) {
			this.graph = new Graph(getWidth()/2,getHeight()-150,graphSize,1000,1000,Color.BLACK,
					new Color(132,187,235));
			hasChange=false;
		}
		graph.setG(g);
		if(graphCoordinates) {
			graph.drawCoordinates();
			
			drawTree(xcoord,ycoord);
			
			/*
			//Base
			Polygon polygon5 = new Polygon(graph,Color.BLACK,new Color(148,25,25));
			int[] x= {-20,-20,20,20};
			int[] y = {-10,10,10,-10};
			polygon5.setPoints(x, y);
			//polygon5.rotateAngle(angle,0,0);
			polygon5.getFillPolygon();
			polygon5.scalePolygon(scale_x, scale_y);
			polygon5.drawModifiedPolygon();
			
			//Trunk
			Polygon polygon4 = new Polygon(graph,Color.BLACK,new Color(227,166,166));
			int[] x1= {-5,-5,5,5};
			int[] y1= {0,40,40,0};
			polygon4.setPoints(x1, y1);
			polygon4.getFillPolygon();
			polygon4.rotateAngle(angle,0,0);
			polygon4.scalePolygon(scale_x, scale_y);
			polygon4.drawModifiedPolygon();
			
			int[] x2 = {-15,0,15};
			int[] y2 = {40,60,40};
			
			//Bottom
			Polygon polygon3 = new Polygon(graph,Color.BLACK,Color.GREEN);
			polygon3.setPoints(x2, y2);
			polygon3.getFillPolygon();
			polygon3.rotateAngle(angle,0,0);
			polygon3.scalePolygon(scale_x, scale_y);
			polygon3.drawModifiedPolygon();
			
			//Middle
			Polygon polygon2 = new Polygon(graph,Color.BLACK,Color.GREEN);
			for(int i=0;i<3;i++) {
				y2[i]+=10;
			}
			polygon2.setPoints(x2, y2);
			polygon2.getFillPolygon();
			polygon2.rotateAngle(angle,0,0);
			polygon2.scalePolygon(scale_x, scale_y);
			polygon2.drawModifiedPolygon();
			
			//Top
			for(int i=0;i<3;i++) {
				y2[i]+=10;
			}
			Polygon polygon = new Polygon(graph,Color.BLACK,Color.GREEN);
			polygon.setPoints(x2, y2);
			polygon.getFillPolygon();
			polygon.rotateAngle(angle,0,0);
			polygon.scalePolygon(scale_x, scale_y);
			polygon.drawModifiedPolygon();
			*/
			
		}
		//g.setColor(Color.BLACK);
		//g.drawString("Mouse Location: X:"+X+" Y:"+Y, 10, getHeight()-10);
	}
	
	private void drawTree(int xc,int yc) {

		//Base
		Polygon polygon5 = new Polygon(graph,Color.BLACK,new Color(148,25,25));
		int[] x= {-20+xc,-20+xc,20+xc,20+xc};
		int[] y = {-10+yc,10+yc,10+yc,-10+yc};
		polygon5.setPoints(x, y);
		//polygon5.rotateAngle(angle,0,0);
		polygon5.getFillPolygon();
		polygon5.scalePolygon(scale_x, scale_y);
		polygon5.drawModifiedPolygon();
		
		//Trunk
		Polygon polygon4 = new Polygon(graph,Color.BLACK,new Color(227,166,166));
		int[] x1= {-5+xc,-5+xc,5+xc,5+xc};
		int[] y1= {0+yc,40+yc,40+yc,0+yc};
		polygon4.setPoints(x1, y1);
		polygon4.getFillPolygon();
		polygon4.rotateAngle(angle,0,0);
		polygon4.scalePolygon(scale_x, scale_y);
		polygon4.drawModifiedPolygon();
		
		int[] x2 = {-15+xc,0+xc,15+xc};
		int[] y2 = {40+yc,60+yc,40+yc};
		
		//Bottom
		Polygon polygon3 = new Polygon(graph,Color.BLACK,Color.GREEN);
		polygon3.setPoints(x2, y2);
		polygon3.getFillPolygon();
		polygon3.rotateAngle(angle,0,0);
		polygon3.scalePolygon(scale_x, scale_y);
		polygon3.drawModifiedPolygon();
		
		//Middle
		Polygon polygon2 = new Polygon(graph,Color.BLACK,Color.GREEN);
		for(int i=0;i<3;i++) {
			y2[i]+=10;
		}
		polygon2.setPoints(x2, y2);
		polygon2.getFillPolygon();
		polygon2.rotateAngle(angle,0,0);
		polygon2.scalePolygon(scale_x, scale_y);
		polygon2.drawModifiedPolygon();
		
		//Top
		for(int i=0;i<3;i++) {
			y2[i]+=10;
		}
		Polygon polygon = new Polygon(graph,Color.BLACK,Color.GREEN);
		polygon.setPoints(x2, y2);
		polygon.getFillPolygon();
		polygon.rotateAngle(angle,0,0);
		polygon.scalePolygon(scale_x, scale_y);
		polygon.drawModifiedPolygon();
		
	}

	//Inherited abstract methods

	@Override
	public void setAnimate() {
		this.fall = true;
		
	}

	@Override
	public void setXcoord(int Xcoord) {
		this.xcoord = Xcoord;
		
	}

	@Override
	public void setYcoord(int Ycoord) {
		this.ycoord = Ycoord;
		
	}

	@Override
	public void setAngle(int angle) {
		this.angle = angle;
		
	}

	@Override
	public void setScale_x(int scale) {
		this.scale_x = scale;
		
	}

	@Override
	public void setScale_y(int scale) {
		this.scale_y = scale;
		
	}
	
	@Override
	public void setGraphSize(int size) {
		this.graphSize=size;
		hasChange=true;
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseExited(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mousePressed(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

	@Override
	public void mouseReleased(MouseEvent arg0) {
		// TODO Auto-generated method stub
		
	}

}

